{"ast":null,"code":"var _jsxFileName = \"/home/stephen/Desktop/Taras web app/frontend-nextjs/components/Map.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport ReactMapGL from 'react-map-gl';\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      viewport: {\n        width: '100vw',\n        height: '100vh',\n        latitude: 38.9868,\n        longitude: -77.0325,\n        zoom: 13\n      },\n      geojson: {}\n    });\n  }\n\n  componentDidMount() {\n    const map = this.reactMap.getMap();\n    map.on('load', () => {\n      fetch('http://localhost:3001/taras/coordinates/geojson').then(res => res.json()).then(data => this.displayDataOnMap(data.data));\n    });\n  }\n\n  displayDataOnMap(geojson) {\n    const map = this.reactMap.getMap();\n    map.addSource('crash-data', geojson);\n    map.addLayer({\n      'id': 'points',\n      'type': 'circle',\n      'source': 'crash-data',\n      'layout': {}\n    });\n    map.addLayer({\n      'id': 'earthquakes-heat',\n      'type': 'heatmap',\n      'source': 'crash-data',\n      'maxzoom': 9,\n      'paint': {\n        // Increase the heatmap weight based on frequency and property magnitude\n        'heatmap-weight': ['interpolate', ['linear'], ['get', 'mag'], 0, 0, 6, 1],\n        // Increase the heatmap color weight weight by zoom level\n        // heatmap-intensity is a multiplier on top of heatmap-weight\n        'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, 9, 3],\n        // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n        // Begin color ramp at 0-stop with a 0-transparancy color\n        // to create a blur-like effect.\n        'heatmap-color': ['interpolate', ['linear'], ['heatmap-density'], 0, 'rgba(33,102,172,0)', 0.2, 'rgb(103,169,207)', 0.4, 'rgb(209,229,240)', 0.6, 'rgb(253,219,199)', 0.8, 'rgb(239,138,98)', 1, 'rgb(178,24,43)'],\n        // Adjust the heatmap radius by zoom level\n        'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, 9, 20],\n        // Transition from heatmap to circle layer by zoom level\n        'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\n      }\n    }, 'waterway-label');\n  }\n\n  render() {\n    return __jsx(ReactMapGL, _extends({\n      ref: reactMap => this.reactMap = reactMap,\n      mapStyle: \"mapbox://styles/mapbox/streets-v9\",\n      mapboxApiAccessToken: \"pk.eyJ1IjoieW9tYW40NyIsImEiOiJjampxM2g3YjUyMzFyM3ZvMXNjZ2R3d2ZtIn0.r0zXd8hAqa1haG3lkjlDwA\",\n      onViewportChange: viewport => this.setState({\n        viewport\n      })\n    }, this.state.viewport, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/stephen/Desktop/Taras web app/frontend-nextjs/components/Map.js"],"names":["Component","ReactMapGL","Map","viewport","width","height","latitude","longitude","zoom","geojson","componentDidMount","map","reactMap","getMap","on","fetch","then","res","json","data","displayDataOnMap","addSource","addLayer","render","setState","state"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport ReactMapGL from 'react-map-gl';\n\nclass Map extends Component {\n\n  state = {\n    viewport: {\n      width: '100vw',\n      height: '100vh',\n      latitude: 38.9868,\n      longitude: -77.0325,\n      zoom: 13,\n    },\n    geojson: {}\n  };\n\n  componentDidMount() {\n\n    const map = this.reactMap.getMap(); \n\n    map.on('load', () => {\n        fetch('http://localhost:3001/taras/coordinates/geojson')\n        .then(res => res.json())\n        .then(data => this.displayDataOnMap(data.data));\n    })\n\n    \n  }\n\n  displayDataOnMap(geojson){\n\n    const map = this.reactMap.getMap(); \n\n    map.addSource('crash-data',geojson)\n\n    map.addLayer({\n        'id': 'points',\n        'type': 'circle',\n        'source': 'crash-data',\n        'layout': {}});\n    \n        map.addLayer(\n          {\n          'id': 'earthquakes-heat',\n          'type': 'heatmap',\n          'source': 'crash-data',\n          'maxzoom': 9,\n          'paint': {\n          // Increase the heatmap weight based on frequency and property magnitude\n          'heatmap-weight': [\n          'interpolate',\n          ['linear'],\n          ['get', 'mag'],\n          0,\n          0,\n          6,\n          1\n          ],\n          // Increase the heatmap color weight weight by zoom level\n          // heatmap-intensity is a multiplier on top of heatmap-weight\n          'heatmap-intensity': [\n          'interpolate',\n          ['linear'],\n          ['zoom'],\n          0,\n          1,\n          9,\n          3\n          ],\n          // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n          // Begin color ramp at 0-stop with a 0-transparancy color\n          // to create a blur-like effect.\n          'heatmap-color': [\n          'interpolate',\n          ['linear'],\n          ['heatmap-density'],\n          0,\n          'rgba(33,102,172,0)',\n          0.2,\n          'rgb(103,169,207)',\n          0.4,\n          'rgb(209,229,240)',\n          0.6,\n          'rgb(253,219,199)',\n          0.8,\n          'rgb(239,138,98)',\n          1,\n          'rgb(178,24,43)'\n          ],\n          // Adjust the heatmap radius by zoom level\n          'heatmap-radius': [\n          'interpolate',\n          ['linear'],\n          ['zoom'],\n          0,\n          2,\n          9,\n          20\n          ],\n          // Transition from heatmap to circle layer by zoom level\n          'heatmap-opacity': [\n          'interpolate',\n          ['linear'],\n          ['zoom'],\n          7,\n          1,\n          9,\n          0\n          ]\n          }\n          },\n          'waterway-label'\n          );\n          \n\n  }\n\n  render() {\n    return (\n      <ReactMapGL\n        ref={(reactMap) => this.reactMap = reactMap}\n        mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n        mapboxApiAccessToken=\"pk.eyJ1IjoieW9tYW40NyIsImEiOiJjampxM2g3YjUyMzFyM3ZvMXNjZ2R3d2ZtIn0.r0zXd8hAqa1haG3lkjlDwA\"\n        onViewportChange={(viewport) => this.setState({ viewport })}\n        {...this.state.viewport}\n      />\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}