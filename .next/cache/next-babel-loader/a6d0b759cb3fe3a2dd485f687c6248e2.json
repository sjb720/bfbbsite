{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/stephen/Desktop/BFBB_Client/frontend-nextjs/components/BlitzBoard.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Row, Col, Accordion, Card, Button } from 'react-bootstrap';\nimport BlitzGrid from '../components/BlitzGrid.js';\n\nvar BlitzBoard = function BlitzBoard(props) {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    style: {\n      paddingLeft: 30,\n      paddingBottom: 10,\n      width: \"100%\",\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, props.room.players.sort(function (a, b) {\n    return a.score - b.score;\n  }).reverse().map(function (player) {\n    return __jsx(Col, {\n      score: player.score,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      style: {\n        borderRadius: 20,\n        backgroundColor: player.color + \"aa\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      style: {\n        fontSize: 48,\n        lineHeight: 0.75,\n        paddingBottom: 15,\n        paddingTop: 12\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 25\n      }\n    }, player.display_name, \": \", __jsx(\"b\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 129\n      }\n    }, player.score))));\n  })), __jsx(Row, {\n    style: {\n      paddingLeft: 30,\n      paddingBottom: 10,\n      width: \"100%\",\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    xs: props.padding,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, __jsx(Accordion, {\n    defaultActiveKey: \"0\",\n    style: {\n      color: \"black\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }, props.room.board.levels.map(function (level) {\n    return __jsx(Card, {\n      bg: props.room.level_data[\"\" + level].collected == props.room.level_data[\"\" + level].count ? \"success\" : \"dark\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 25\n      }\n    }, __jsx(Accordion.Toggle, {\n      as: Card.Header,\n      style: {\n        color: \"white\",\n        fontWeight: \"bold\"\n      },\n      eventKey: level,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 33\n      }\n    }, level, \" \", props.room.level_data[\"\" + level].collected, \"/\", props.room.level_data[\"\" + level].count), __jsx(Accordion.Collapse, {\n      eventKey: level,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 29\n      }\n    }, __jsx(Card.Body, {\n      style: {\n        padding: 0\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 33\n      }\n    }, __jsx(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat( auto-fill, minmax(13%, 1fr) )\",\n        width: \"100%\",\n        justifyContent: 'space-between'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 37\n      }\n    }, props.room.board.tasks.map(function (task) {\n      if (task.level == level) return __jsx(BlitzGrid, {\n        rid: props.room.id,\n        pid: props.pid,\n        name: task.name,\n        type: task.type,\n        collected: task.collected,\n        collector: task.collector,\n        collect_function: props.collect_function,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 49\n        }\n      });\n    })))));\n  }))), __jsx(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat( auto-fill, minmax(60px, 1fr) )\",\n      width: \"100%\",\n      justifyContent: 'space-between'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, props.room.board.tasks.map(function (task) {\n    return __jsx(BlitzGrid, {\n      rid: props.room.id,\n      pid: props.pid,\n      name: task.name,\n      type: task.type,\n      collected: task.collected,\n      collector: task.collector,\n      collect_function: props.collect_function,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    });\n  })))));\n};\n\n_c = BlitzBoard;\nexport default BlitzBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlitzBoard\");","map":{"version":3,"sources":["/home/stephen/Desktop/BFBB_Client/frontend-nextjs/components/BlitzBoard.js"],"names":["Row","Col","Accordion","Card","Button","BlitzGrid","BlitzBoard","props","paddingLeft","paddingBottom","width","textAlign","room","players","sort","a","b","score","reverse","map","player","borderRadius","backgroundColor","color","fontSize","lineHeight","paddingTop","display_name","padding","board","levels","level","level_data","collected","count","Header","fontWeight","display","gridTemplateColumns","justifyContent","tasks","task","id","pid","name","type","collector","collect_function"],"mappings":"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","sourcesContent":["import { Row, Col, Accordion, Card, Button } from 'react-bootstrap';\nimport BlitzGrid from '../components/BlitzGrid.js'\n\n\n\nconst BlitzBoard = (props) => (\n    <div>\n        <Row style={{ paddingLeft: 30, paddingBottom: 10, width: \"100%\", textAlign: \"center\" }}>\n            {props.room.players.sort((a, b) => a.score - b.score).reverse().map(player =>\n                <Col score={player.score}>\n                    <div style={{ borderRadius: 20, backgroundColor: player.color + \"aa\" }}>\n                        <div style={{ fontSize: 48, lineHeight: 0.75, paddingBottom: 15,paddingTop:12 }}>{player.display_name}: <b>{player.score}</b></div>\n\n                    </div>\n\n                </Col>\n            )}\n        </Row>\n        <Row style={{ paddingLeft: 30, paddingBottom: 10, width: \"100%\", textAlign: \"center\" }}>\n            <Col xs={props.padding}>\n                <Accordion defaultActiveKey=\"0\" style={{ color: \"black\" }}>\n                    {props.room.board.levels.map(level =>\n                        <Card bg={props.room.level_data[\"\"+level].collected==props.room.level_data[\"\"+level].count ? \"success\" : \"dark\"}>\n                                <Accordion.Toggle as={Card.Header} style={{color:\"white\",fontWeight:\"bold\"}}  eventKey={level}>\n                                    {level} {props.room.level_data[\"\"+level].collected}/{props.room.level_data[\"\"+level].count}\n                                </Accordion.Toggle>\n                            <Accordion.Collapse eventKey={level}>\n                                <Card.Body style={{padding:0}}>\n                                    <div style={{ display: \"grid\", gridTemplateColumns: \"repeat( auto-fill, minmax(13%, 1fr) )\", width: \"100%\", justifyContent: 'space-between' }}>\n                                        {props.room.board.tasks.map(task => {\n                                            if (task.level == level) return (\n                                                <BlitzGrid rid={props.room.id} pid={props.pid} name={task.name} type={task.type} collected={task.collected} collector={task.collector} collect_function={props.collect_function} />)\n                                        }\n                                        )}\n                                    </div>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    )}\n\n                </Accordion>\n\n            </Col>\n            <Col>\n                <div style={{ display: \"grid\", gridTemplateColumns: \"repeat( auto-fill, minmax(60px, 1fr) )\", width: \"100%\", justifyContent: 'space-between' }}>\n                    {props.room.board.tasks.map(task =>\n                        <BlitzGrid rid={props.room.id} pid={props.pid} name={task.name} type={task.type} collected={task.collected} collector={task.collector} collect_function={props.collect_function} />\n                    )}\n                </div>\n            </Col>\n        </Row>\n\n\n    </div>\n\n\n);\n\nexport default BlitzBoard;\n"]},"metadata":{},"sourceType":"module"}